# -*- coding: utf-8 -*-
from __future__ import absolute_import

import json
import logging
import sys
from datetime import timedelta

import os

# add up one level dir into sys path
sys.path.append(os.path.abspath(os.path.dirname(os.path.dirname(__file__))))
os.environ['DJANGO_SETTINGS_MODULE'] = 'luckyplatform.settings'

from luckyapi.logic.coupon import send_coupon_to_user

from luckycommon.push import handler as push_handler
from luckycommon.cache import redis_cache

from luckycommon.order.model.order import AwardedOrder, ORDER_STATUS
from luckycommon.order.db import order as order_db
from luckycommon.model.shipping import AutoShipping
from luckycommon.model.receipt import SHIPPING_TYPE
from luckycommon.db.goods import get_goods
from luckycommon.db.activity import get_activity, get_activity_users
from luckycommon.db.transaction import add_system_award_transaction

from django.conf import settings

_LOGGER = logging.getLogger('lucky')


COIN_TIDS = settings.COIN_TIDS


def get_await_list():
    items = AwardedOrder.query.filter(
        AwardedOrder.status == ORDER_STATUS.WAIT_SHIP).all()
    return items


def get_await_coin_list():
    """
    获取以夺宝币方式收货的订单
    """
    items = AwardedOrder.query.filter(
        AwardedOrder.status == ORDER_STATUS.WAIT_SHIP).filter(
        AwardedOrder.shipping_coin == 1).all()
    return items


def shipping_coin(await_order, activity, recharge_price=None):
    user_id = await_order.user_id
    if redis_cache.is_virtual_account(user_id):
        return
    if not recharge_price:
        recharge_price = COIN_TIDS[activity.template_id]
    _LOGGER.info('begin recharge, %s, price %s', await_order.order_id, recharge_price)
    print('begin recharge, %s, price %s', await_order.order_id, recharge_price)
    try:
        # 加锁
        item = AutoShipping.query.filter(
            AutoShipping.order_id == await_order.order_id).with_lockmode(
            'update').first()
        if not item:
            item = AutoShipping()
            item.order_id = await_order.order_id
            item.template_id = activity.template_id
            item.user_id = user_id
            item.phone = 'coin'
            item.price = recharge_price
            item.status = 0
            item.shipping_type = SHIPPING_TYPE.COIN
            item.save()
            order_db.update_order_info(
                await_order.order_id,
                {
                    'status': ORDER_STATUS.DEAL,
                })
            add_system_award_transaction(
                user_id, award_amount=recharge_price, title=u'đồng xu')
            item.status = 1
            item.save()
            push_handler.push_shipping(
                await_order.order_id, {'express': 'coin'})
            # show_order(await_order)
            _LOGGER.info('finish recharge %s coin %s for %s', recharge_price, await_order.order_id, user_id)
            print('finish recharge %s coin %s for %s', recharge_price, await_order.order_id, user_id)
            return
    except Exception as e:
        _LOGGER.exception('send coin to user exception, %s-%s, %s', user_id, await_order.order_id, e)
        print('send coin to user exception, %s-%s, %s', user_id, await_order.order_id, e)


def start():
    await_orders = get_await_list()
    for await_order in await_orders:
        activity_id = await_order.activity_id
        activity = get_activity(activity_id)
        print 'check order, %s %s' % (await_order.order_id, activity.template_id)
        if activity.template_id in COIN_TIDS:
            shipping_coin(await_order, activity)


def start_ex():
    await_orders = get_await_coin_list()
    for await_order in await_orders:
        activity_id = await_order.activity_id
        activity = get_activity(activity_id)
        print 'check coin order, %s %s' % (await_order.order_id, activity.template_id)
        goods_price = float(get_goods(activity.goods_id).price)
        shipping_coin(await_order, activity, recharge_price=goods_price)


if __name__ == "__main__":
    start()
    start_ex()
